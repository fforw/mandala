var Demo=function(n){var e={};function t(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return n[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}return t.m=n,t.c=e,t.d=function(n,e,r){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:r})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)t.d(r,o,function(e){return n[e]}.bind(null,o));return r},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=2)}([function(n,e,t){},,function(n,e,t){"use strict";t.r(e);t(0);Math.sqrt(5),Math.PI;var r,o,i,a,f,c={width:0,height:0};function l(n){o.uniform1f(i,n),o.uniform1f(a,c.width),o.uniform1f(f,c.height),o.drawElements(o.TRIANGLES,h.length,o.UNSIGNED_SHORT,0),requestAnimationFrame(l)}var s=[-1,1,0,-1,-1,0,1,-1,0,1,1,0],h=[3,2,1,3,1,0];function d(n){var e=-16&window.innerWidth,t=0|window.innerHeight;c.width=e,c.height=t,r.width=e,r.height=t,o.viewport(0,0,r.width,r.height)}window.onload=function(){r=document.getElementById("screen");var n=-16&window.innerWidth,e=0|window.innerHeight;c.width=n,c.height=e,r.width=n,r.height=e;var t=(o=r.getContext("webgl")).createBuffer();o.bindBuffer(o.ARRAY_BUFFER,t),o.bufferData(o.ARRAY_BUFFER,new Float32Array(s),o.STATIC_DRAW),o.bindBuffer(o.ARRAY_BUFFER,null);var v=o.createBuffer();o.bindBuffer(o.ELEMENT_ARRAY_BUFFER,v),o.bufferData(o.ELEMENT_ARRAY_BUFFER,new Uint16Array(h),o.STATIC_DRAW),o.bindBuffer(o.ELEMENT_ARRAY_BUFFER,null);var u=o.createShader(o.VERTEX_SHADER);o.shaderSource(u,"#define GLSLIFY 1\nattribute vec3 coordinates;\nvoid main(void) {\n    gl_Position = vec4(coordinates, 1.0);\n}\n"),o.compileShader(u);var x=o.createShader(o.FRAGMENT_SHADER);o.shaderSource(x,"precision mediump float;\n#define GLSLIFY 1\n\nuniform float time;\nuniform float width;\nuniform float height;\n\nconst float pi = 3.141592653589793;\nconst float tau = pi * 2.0;\nconst float hpi = pi * 0.5;\n\nconst float seventh = 1.0/7.0;\n\nfloat atan2(in float y, in float x)\n{\n    return abs(x) > abs(y) ? hpi - atan(x,y) : atan(y,x);\n}\n\n//////// HSL ////////////////////\n\nfloat hue2rgb(float f1, float f2, float hue) {\n    if (hue < 0.0)\n    hue += 1.0;\n    else if (hue > 1.0)\n    hue -= 1.0;\n    float res;\n    if ((6.0 * hue) < 1.0)\n    res = f1 + (f2 - f1) * 6.0 * hue;\n    else if ((2.0 * hue) < 1.0)\n    res = f2;\n    else if ((3.0 * hue) < 2.0)\n    res = f1 + (f2 - f1) * ((2.0 / 3.0) - hue) * 6.0;\n    else\n    res = f1;\n    return res;\n}\n\nvec3 hsl2rgb(vec3 hsl) {\n    vec3 rgb;\n\n    if (hsl.y == 0.0) {\n        rgb = vec3(hsl.z); // Luminance\n    } else {\n        float f2;\n\n        if (hsl.z < 0.5)\n        f2 = hsl.z * (1.0 + hsl.y);\n        else\n        f2 = hsl.z + hsl.y - hsl.y * hsl.z;\n\n        float f1 = 2.0 * hsl.z - f2;\n\n        rgb.r = hue2rgb(f1, f2, hsl.x + (1.0/3.0));\n        rgb.g = hue2rgb(f1, f2, hsl.x);\n        rgb.b = hue2rgb(f1, f2, hsl.x - (1.0/3.0));\n    }\n    return rgb;\n}\n\nvec3 hsl2rgb(float h, float s, float l) {\n    return hsl2rgb(vec3(h, s, l));\n}\n\n//\tSimplex 3D Noise\n//\tby Ian McEwan, Ashima Arts\n//\nvec4 permute(vec4 x){return mod(((x*34.0)+1.0)*x, 289.0);}\nvec4 taylorInvSqrt(vec4 r){return 1.79284291400159 - 0.85373472095314 * r;}\n\nfloat snoise(vec3 v){\n    const vec2  C = vec2(1.0/6.0, 1.0/3.0) ;\n    const vec4  D = vec4(0.0, 0.5, 1.0, 2.0);\n\n    // First corner\n    vec3 i  = floor(v + dot(v, C.yyy) );\n    vec3 x0 =   v - i + dot(i, C.xxx) ;\n\n    // Other corners\n    vec3 g = step(x0.yzx, x0.xyz);\n    vec3 l = 1.0 - g;\n    vec3 i1 = min( g.xyz, l.zxy );\n    vec3 i2 = max( g.xyz, l.zxy );\n\n    //  x0 = x0 - 0. + 0.0 * C\n    vec3 x1 = x0 - i1 + 1.0 * C.xxx;\n    vec3 x2 = x0 - i2 + 2.0 * C.xxx;\n    vec3 x3 = x0 - 1. + 3.0 * C.xxx;\n\n    // Permutations\n    i = mod(i, 289.0 );\n    vec4 p = permute( permute( permute(\n    i.z + vec4(0.0, i1.z, i2.z, 1.0 ))\n    + i.y + vec4(0.0, i1.y, i2.y, 1.0 ))\n    + i.x + vec4(0.0, i1.x, i2.x, 1.0 ));\n\n    // Gradients\n    // ( N*N points uniformly over a square, mapped onto an octahedron.)\n    float n_ = 1.0/7.0; // N=7\n    vec3  ns = n_ * D.wyz - D.xzx;\n\n    vec4 j = p - 49.0 * floor(p * ns.z *ns.z);  //  mod(p,N*N)\n\n    vec4 x_ = floor(j * ns.z);\n    vec4 y_ = floor(j - 7.0 * x_ );    // mod(j,N)\n\n    vec4 x = x_ *ns.x + ns.yyyy;\n    vec4 y = y_ *ns.x + ns.yyyy;\n    vec4 h = 1.0 - abs(x) - abs(y);\n\n    vec4 b0 = vec4( x.xy, y.xy );\n    vec4 b1 = vec4( x.zw, y.zw );\n\n    vec4 s0 = floor(b0)*2.0 + 1.0;\n    vec4 s1 = floor(b1)*2.0 + 1.0;\n    vec4 sh = -step(h, vec4(0.0));\n\n    vec4 a0 = b0.xzyw + s0.xzyw*sh.xxyy ;\n    vec4 a1 = b1.xzyw + s1.xzyw*sh.zzww ;\n\n    vec3 p0 = vec3(a0.xy,h.x);\n    vec3 p1 = vec3(a0.zw,h.y);\n    vec3 p2 = vec3(a1.xy,h.z);\n    vec3 p3 = vec3(a1.zw,h.w);\n\n    //Normalise gradients\n    vec4 norm = taylorInvSqrt(vec4(dot(p0,p0), dot(p1,p1), dot(p2, p2), dot(p3,p3)));\n    p0 *= norm.x;\n    p1 *= norm.y;\n    p2 *= norm.z;\n    p3 *= norm.w;\n\n    // Mix final noise value\n    vec4 m = max(0.6 - vec4(dot(x0,x0), dot(x1,x1), dot(x2,x2), dot(x3,x3)), 0.0);\n    m = m * m;\n    return 42.0 * dot( m*m, vec4( dot(p0,x0), dot(p1,x1),\n    dot(p2,x2), dot(p3,x3) ) );\n}\n\nconst float interval = 50000.0;\nconst float third = 1.0/3.0;\nconst vec3 mid= vec3(0.5,0.5,0.5);\nconst vec3 black = vec3(0,0,0);\nconst vec3 white = vec3(1,1,1);\n\nvoid main(void) {\n\n    float hw = width * 0.5;\n    float hh = width * 0.5;\n\n    float diagonal = sqrt(hw*hw+hh*hh);\n\n    float size = min(width, height);\n\n    float xOff = (sin(time * 0.0004) + sin(time * 0.0003)) * size / 6.0;\n    float yOff = (sin(time * 0.0002) - sin(time * 0.0005)) * size / 6.0;\n\n    float tx = ((gl_FragCoord.x + xOff) / size) * 2.0 - 1.0;\n    float ty = 1.0 - ((gl_FragCoord.y + yOff) / size) * 2.0;\n\n    if (width < height)\n    {\n        ty -= (height - width) / size;\n    }\n    else\n    {\n        tx -= (width - height) / size;\n    }\n\n    float a = fract(((atan2(ty,tx) + pi) / tau) + mod(time * 0.8,  interval) / interval);\n\n    float d = sqrt( tx * tx + ty * ty);\n\n    float a2 = (mod(a, seventh) / seventh);\n\n    a2 = a2 < 0.5 ? a2 * 2.0 : 1.0 - (a2 - 0.5) * 2.0;\n\n    //d = d < 1.0 ? d: 1.0 - (d - 1.0);\n    float n = snoise(vec3(a2 * 0.6, pow(d,0.4) * 4.0 - time * 0.0002, time * 0.00007));\n\n    vec3 color = hsl2rgb(\n        fract(time * 0.00005 + (sin(a * pi) * 0.25 + snoise(vec3(a2 * 0.75,  d * 5.0,time * 0.0004)) * seventh) + (n < 0.0 ? 0.0 : third)),\n        0.5 + cos(a*tau + time * 0.001) * 0.4,\n        0.5\n    );\n\n    float darken = pow(d, 2.0) * 0.02;\n\n    gl_FragColor = vec4(mod(n, 0.5) < 0.4 - darken /*&& a2 > 0.01 && a2 < 0.99 && mod(d, third) < third * 0.98*/ ? color: black, 1);\n}\n\n"),o.compileShader(x);var m=!1;if(o.getShaderParameter(u,o.COMPILE_STATUS)||(console.error("Invalid vertex shader",o.getShaderInfoLog(u)),m=!0),o.getShaderParameter(x,o.COMPILE_STATUS)||(console.error("Invalid fragment shader",o.getShaderInfoLog(x)),m=!0),!m){var y=o.createProgram();if(o.attachShader(y,u),o.attachShader(y,x),o.linkProgram(y),o.getProgramParameter(y,o.LINK_STATUS)){i=o.getUniformLocation(y,"time"),a=o.getUniformLocation(y,"width"),f=o.getUniformLocation(y,"height"),o.useProgram(y),o.bindBuffer(o.ARRAY_BUFFER,t),o.bindBuffer(o.ELEMENT_ARRAY_BUFFER,v);var g=o.getAttribLocation(y,"coordinates");o.vertexAttribPointer(g,3,o.FLOAT,!1,0,0),o.enableVertexAttribArray(g),o.clearColor(0,0,0,1),o.enable(o.DEPTH_TEST),o.clear(o.COLOR_BUFFER_BIT|o.DEPTH_BUFFER_BIT),o.viewport(0,0,r.width,r.height),window.addEventListener("resize",d,!0),requestAnimationFrame(l)}else console.error(o.getProgramInfoLog(y))}}}]);
//# sourceMappingURL=bundle-main-d8a81ee611e2adc5738a.js.map